@{
    ViewBag.Title = "Tipos de Plan Grupo";
}


<section class="content">
    <div class="box-header with-border">
        <h3 class="box-title">@ViewBag.Title</h3>

        <div class="box-tools pull-right">
            <div class="has-feedback">
                <a class="btn btn-default btn-sm" href="@Url.Action("Create", "PlanGrupoTipoCarlos")" data-toggle="tooltip" title="Nuevo"> <i class="glyphicon glyphicon-plus"></i></a>
                <a class="btn btn-default btn-sm" href="@Url.Action("ReportList", "TipoPlanCarlos")" data-toggle="tooltip" title="Imprimir"> <i class="fa fa-print"></i></a>
                <a class="btn btn-default btn-sm" href="#" onclick="onExport();" data-toggle="tooltip" title="Exportar"> <i class="dx-icon-exportxlsx"></i></a>
            </div>
        </div>
    </div>

    @(Html.DevExtreme().DataGrid<Contabilidad.Models.VM.Carlos.clsPlanGrupoTipoVMCarlos>()
                        .ID("grid")
                        .DataSource(d => d.Mvc().Controller("PlanGrupoTipoCarlos").LoadAction("PlanGrupoTipoGrid").Key("PlanGrupoTipoId"))
                        .AllowColumnResizing(true)
                        .ShowColumnLines(false)
                        .ShowRowLines(true)
                        .ShowBorders(true)
                        .FilterRow(filterRow => filterRow.Visible(true).ApplyFilter(GridApplyFilterMode.Auto))
                        .Sorting(sorting => sorting.Mode(GridSortingMode.Multiple))
                        .Paging(p => p.PageSize(10))
                        .Width("100%")
                        .RowAlternationEnabled(true)
                        .Selection(s => s.Mode(SelectionMode.Single))
                        .OnCellPrepared("onCellPrepared")
                        .Export(e => e.Enabled(false).FileName("TipoPlanCarlos").ExcelWrapTextEnabled(false))
                        .Columns(columns =>
                        {
                            columns.AddFor(m => m.PlanGrupoTipoCod).Width("20%");
                            columns.AddFor(m => m.PlanGrupoTipoDes).Width("60%");
                            columns.AddFor(m => m.EstadoDes).Width("20%");
                            columns.Add().DataField("Edit").Caption("").Width(30).AllowFiltering(false).CellTemplate(Html.ActionLink(" ", "Edit", new { id = "PlanGrupoTipoId" }, new { @class = "dx-icon-edit" }).ToHtmlString().Replace("PlanGrupoTipoId", "<%= data.PlanGrupoTipoId %>"));
                            columns.Add().DataField("Delete").Caption("").Width(30).AllowFiltering(false).CellTemplate(Html.ActionLink(" ", "Delete", new { id = "PlanGrupoTipoId" }, new { @class = "dx-icon-trash" }).ToHtmlString().Replace("PlanGrupoTipoId", "<%= data.PlanGrupoTipoId %>"));
                            columns.Add().DataField("Details").Caption("").Width(30).AllowFiltering(false).CellTemplate(Html.ActionLink(" ", "Details", new { id = "PlanGrupoTipoId" }, new { @class = "fa fa-info-circle" }).ToHtmlString().Replace("PlanGrupoTipoId", "<%= data.PlanGrupoTipoId %>"));
                        })
    )
</section>

<script>
    function onExport() {
        $("#grid").dxDataGrid("instance").exportToExcel(false);
    }

    function onCellPrepared(e) {
        if (e.rowType === "header") {
            e.cellElement.addClass("columnHeaderCSS");
            e.cellElement.find("input").addClass("columnHeaderCSS");
        }
    }
</script>
